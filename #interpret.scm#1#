#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 5.3.3 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 30 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 76 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 10 #"Monospace\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 37
#"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 48 96 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 48 96 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 4 32 #"widget.rkt::browser-text% basic\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 59
#"macro-debugger/syntax-browser/properties color-text% basic\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 56 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 190 190 190 0 0 0 -1 -1 4
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 255 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 107 142 35 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 100 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 100 149 237 0 0 0 -1 -1 4
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 65 105 225 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 70 130 180 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 47 79 79 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 139 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 75 0 130 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 160 32 240 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 250 128 114 0 0 0 -1 -1 4
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 184 134 11 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 128 128 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 169 169 169 0 0 0 -1 -1
          0 3544 0 17 3 24 #";***********************"
0 0 22 29 1 #"\n"
0 0 17 3 24 #"; Simple C Interpreter *"
0 0 22 29 1 #"\n"
0 0 17 3 24 #";***********************"
0 0 22 29 1 #"\n"
0 0 17 3 24 #"; Bharat Gupta *********"
0 0 22 29 1 #"\n"
0 0 17 3 24 #"; BXG135 ***************"
0 0 22 29 1 #"\n"
0 0 17 3 24 #"; Robert Luciano *******"
0 0 22 29 1 #"\n"
0 0 17 3 24 #"; RDL40 ****************"
0 0 22 29 1 #"\n"
0 0 17 3 23 #"; 4/2/13 **************"
0 0 22 29 1 #"\n"
0 0 17 3 24 #"; **********************"
0 0 22 29 1 #"\n"
0 0 17 3 16 #"; Project Part 3"
0 0 22 29 1 #"\n"
0 0 17 3 23 #"; Interpreter for C or "
0 0 22 29 1 #"\n"
0 0 17 3 21 #"; Java like language."
0 0 22 29 1 #"\n"
0 0 17 3 24 #";***********************"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"load"
0 0 22 3 1 #" "
0 0 19 3 17 #"\"environment.scm\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 17 3 30 #";(load \"loopSimpleParser.scm\")"
0 0 22 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 4 #"load"
0 0 17 3 1 #" "
0 0 17 3 21 #"\"functionParser.scm\")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"load"
0 0 22 3 1 #" "
0 0 19 3 17 #"\"classParser.scm\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 50 #"; now only used to set up the \"global environment\""
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 14 #"interpret_orig"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 4 #"file"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 7 #"call/cc"
0 0 22 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 1 #"k"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               ("
0 0 14 3 19 #"interpret_stmt_list"
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ("
0 0 14 3 6 #"parser"
0 0 22 3 1 #" "
0 0 14 3 4 #"file"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                 "
0 0 14 3 15 #"new_environment"
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                 "
0 0 14 3 1 #"k"
0 0 22 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 1 #"v"
0 0 22 3 3 #") ("
0 0 14 3 5 #"error"
0 0 22 3 1 #" "
0 0 19 3 15 #"\"Illegal break\""
0 0 22 3 4 #")) ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 1 #"v"
0 0 22 3 3 #") ("
0 0 14 3 5 #"error"
0 0 22 3 1 #" "
0 0 19 3 18 #"\"Illegal continue\""
0 0 22 3 7 #")))))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 9 #"interpret"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 4 #"file"
0 0 22 3 1 #" "
0 0 14 3 9 #"classname"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 20 #"interpret_class_list"
0 0 22 3 2 #" ("
0 0 14 3 6 #"parser"
0 0 22 3 1 #" "
0 0 14 3 4 #"file"
0 0 22 3 3 #") ("
0 0 14 3 14 #"string->symbol"
0 0 22 3 1 #" "
0 0 14 3 9 #"classname"
0 0 22 3 2 #") "
0 0 14 3 15 #"new_environment"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 20 #"interpret_class_list"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 9 #"parsetree"
0 0 22 3 1 #" "
0 0 14 3 10 #"main_class"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 22 3 1 #" "
0 0 14 3 9 #"parsetree"
0 0 22 3 2 #") "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 14 3 10 #"main_class"
0 0 22 3 2 #" ("
0 0 14 3 9 #"get_cname"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 9 #"parsetree"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 15 #"find_class_main"
0 0 22 3 2 #" ("
0 0 14 3 6 #"lookup"
0 0 22 3 1 #" "
0 0 14 3 10 #"main_class"
0 0 22 3 2 #" ("
0 0 14 3 19 #"interpret_class_def"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 9 #"parsetree"
0 0 22 3 2 #") "
0 0 14 3 3 #"env"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 14 3 20 #"interpret_class_list"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 9 #"parsetree"
0 0 22 3 2 #") "
0 0 14 3 10 #"main_class"
0 0 22 3 2 #" ("
0 0 14 3 19 #"interpret_class_def"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 9 #"parsetree"
0 0 22 3 2 #") "
0 0 14 3 3 #"env"
0 0 22 3 6 #"))))))"
0 0 22 29 1 #"\n"
0 0 22 3 44 #"                                            "
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 9 #"get_cname"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 9 #"class_def"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 3 #"car"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 9 #"class_def"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 15 #"find_class_main"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 14 3 14 #"interpret_main"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 2 #" ("
0 0 14 3 6 #"lookup"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"main"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 14 #"interpret_main"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 4 #"stmt"
0 0 22 3 1 #" "
0 0 14 3 11 #"environment"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   ("
0 0 14 3 7 #"call/cc"
0 0 22 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 1 #"k"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               ("
0 0 14 3 19 #"interpret_stmt_list"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"                "
0 0 14 3 4 #"stmt"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"                "
0 0 14 3 11 #"environment"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"                "
0 0 14 3 1 #"k"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 1 #"v"
0 0 22 3 3 #") ("
0 0 14 3 5 #"error"
0 0 22 3 1 #" "
0 0 19 3 15 #"\"Illegal break\""
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 1 #"v"
0 0 22 3 3 #") ("
0 0 14 3 5 #"error"
0 0 22 3 1 #" "
0 0 19 3 18 #"\"Illegal continue\""
0 0 22 3 7 #")))))))"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"              "
0 0 22 29 1 #"\n"
0 0 17 3 30 #";returns the final environment"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 19 #"interpret_stmt_list"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 9 #"parsetree"
0 0 22 3 1 #" "
0 0 14 3 11 #"environment"
0 0 22 3 1 #" "
0 0 14 3 1 #"k"
0 0 22 3 1 #" "
0 0 14 3 1 #"b"
0 0 22 3 1 #" "
0 0 14 3 1 #"c"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               ("
0 0 15 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 19 #"                 (("
0 0 14 3 5 #"null?"
0 0 22 3 1 #" "
0 0 14 3 9 #"parsetree"
0 0 22 3 2 #") "
0 0 14 3 11 #"environment"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 18 #"                 ("
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 14 3 19 #"interpret_stmt_list"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 9 #"parsetree"
0 0 22 3 3 #") ("
0 0 14 3 14 #"interpret_stmt"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 9 #"parsetree"
0 0 22 3 2 #") "
0 0 14 3 11 #"environment"
0 0 22 3 1 #" "
0 0 14 3 1 #"k"
0 0 22 3 1 #" "
0 0 14 3 1 #"b"
0 0 22 3 1 #" "
0 0 14 3 1 #"c"
0 0 22 3 2 #") "
0 0 14 3 1 #"k"
0 0 22 3 1 #" "
0 0 14 3 1 #"b"
0 0 22 3 1 #" "
0 0 14 3 1 #"c"
0 0 22 3 5 #")))))"
0 0 17 3 31 #";come back here to fix continue"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 28 #";interpets a given statement"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 14 #"interpret_stmt"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 4 #"stmt"
0 0 22 3 1 #" "
0 0 14 3 11 #"environment"
0 0 22 3 1 #" "
0 0 14 3 6 #"return"
0 0 22 3 1 #" "
0 0 14 3 5 #"break"
0 0 22 3 1 #" "
0 0 14 3 8 #"continue"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"="
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 16 #"interpret_assign"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 22 3 2 #") "
0 0 14 3 11 #"environment"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"      "
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"var"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 13 #"interpret_dec"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 22 3 2 #") "
0 0 14 3 11 #"environment"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"      "
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 12 #"interpret_if"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 22 3 2 #") "
0 0 14 3 11 #"environment"
0 0 22 3 1 #" "
0 0 14 3 6 #"return"
0 0 22 3 1 #" "
0 0 14 3 5 #"break"
0 0 22 3 1 #" "
0 0 14 3 8 #"continue"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"      "
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 5 #"while"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 15 #"interpret_while"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 22 3 2 #") "
0 0 14 3 11 #"environment"
0 0 22 3 1 #" "
0 0 14 3 6 #"return"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"      "
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 15 3 5 #"begin"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 15 #"interpret_begin"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 22 3 2 #") "
0 0 14 3 11 #"environment"
0 0 22 3 1 #" "
0 0 14 3 6 #"return"
0 0 22 3 1 #" "
0 0 14 3 5 #"break"
0 0 22 3 1 #" "
0 0 14 3 8 #"continue"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"      "
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 8 #"continue"
0 0 22 3 3 #") ("
0 0 14 3 5 #"break"
0 0 22 3 2 #" ("
0 0 14 3 8 #"continue"
0 0 22 3 1 #" "
0 0 14 3 11 #"environment"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"      "
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 5 #"break"
0 0 22 3 3 #") ("
0 0 14 3 5 #"break"
0 0 22 3 1 #" "
0 0 14 3 11 #"environment"
0 0 22 3 3 #")) "
0 0 22 29 1 #"\n"
0 0 22 3 6 #"      "
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 6 #"return"
0 0 22 3 3 #") ("
0 0 14 3 6 #"return"
0 0 22 3 2 #" ("
0 0 14 3 9 #"check_val"
0 0 22 3 2 #" ("
0 0 14 3 8 #"evaluate"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 22 3 2 #") "
0 0 14 3 11 #"environment"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"      "
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 8 #"function"
0 0 22 3 3 #") ("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 22 3 3 #")) "
0 0 20 3 1 #"'"
0 0 14 3 4 #"main"
0 0 22 3 3 #")) "
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 14 #"interpret_main"
0 0 22 3 2 #" ("
0 0 14 3 8 #"mainbody"
0 0 22 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 22 3 2 #") "
0 0 14 3 11 #"environment"
0 0 22 3 1 #" "
0 0 14 3 6 #"return"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"      "
0 0 22 29 1 #"\n"
0 0 22 3 6 #"      "
0 0 17 3 28 #";(function name params body)"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 8 #"function"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 22 #"interpret_function_dec"
0 0 22 3 2 #" ("
0 0 14 3 3 #"op1"
0 0 22 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 22 3 3 #") ("
0 0 14 3 3 #"op2"
0 0 22 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 22 3 3 #") ("
0 0 14 3 3 #"op3"
0 0 22 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 22 3 2 #") "
0 0 14 3 10 #"environmen"
0 0 14 3 1 #"t"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"      "
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 7 #"funcall"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 23 #"interpret_function_call"
0 0 22 3 2 #" ("
0 0 14 3 6 #"lookup"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 22 3 3 #")) "
0 0 14 3 11 #"environment"
0 0 22 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 22 3 3 #")) "
0 0 14 3 11 #"environment"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 22 3 1 #" "
0 0 14 3 11 #"environment"
0 0 22 3 2 #") "
0 0 17 3 66
#"; not sure about here. made sense in my head thats why i put it in"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 22 29 1 #"\n"
0 0 22 3 9 #"      )))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 9 #"check_val"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 1 #"v"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 7 #"number?"
0 0 22 3 1 #" "
0 0 14 3 1 #"v"
0 0 22 3 2 #") "
0 0 14 3 1 #"v"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 1 #"v"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"true"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"false"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 8 #"mainbody"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 4 #"stmt"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 3 #"car"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 22 3 6 #"))))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 23 #";**********************"
0 0 22 29 1 #"\n"
0 0 17 3 29 #";interpret various statements"
0 0 22 29 1 #"\n"
0 0 17 3 23 #";----------------------"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 28 #";binds a value to a variable"
0 0 22 29 1 #"\n"
0 0 17 3 9 #";(x expr)"
0 0 22 29 1 #"\n"
0 0 17 3 16 #"; (x (= y expr))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 16 #"interpret_assign"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 4 #"stmt"
0 0 22 3 1 #" "
0 0 14 3 11 #"environment"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 4 #"bind"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 22 3 3 #") ("
0 0 14 3 8 #"evaluate"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 22 3 2 #") "
0 0 14 3 11 #"environment"
0 0 22 3 3 #") ("
0 0 14 3 12 #"evaluate-env"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 22 3 2 #") "
0 0 14 3 11 #"environment"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 32 #";adds the var to the environment"
0 0 22 29 1 #"\n"
0 0 17 3 4 #";(x)"
0 0 22 29 1 #"\n"
0 0 17 3 9 #";(x expr)"
0 0 22 29 1 #"\n"
0 0 17 3 14 #"; (x (= y 10))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 13 #"interpret_dec"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 4 #"stmt"
0 0 22 3 1 #" "
0 0 14 3 11 #"environment"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 22 3 4 #")) ("
0 0 14 3 3 #"add"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 22 3 2 #") "
0 0 14 3 11 #"environment"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 14 3 4 #"bind"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 22 3 3 #") ("
0 0 14 3 8 #"evaluate"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 22 3 3 #")) "
0 0 14 3 11 #"environment"
0 0 22 3 3 #") ("
0 0 14 3 3 #"add"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 22 3 3 #") ("
0 0 14 3 12 #"evaluate-env"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 22 3 3 #")) "
0 0 14 3 11 #"environment"
0 0 22 3 7 #")))))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 88
(
 #"; evaluates if statements recursively because if statements can be n"
 #"ested due to elseifs"
) 0 0 22 29 1 #"\n"
0 0 17 3 33 #"; ((> x y) (return y) (return x))"
0 0 22 29 1 #"\n"
0 0 17 3 39 #"; ((> (x = 5) y) (return y) (return x))"
0 0 22 29 1 #"\n"
0 0 17 3 56 #"; ((> x y) (return y) (if (> (* x x) y) (return (* x x))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 12 #"interpret_if"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 4 #"stmt"
0 0 22 3 1 #" "
0 0 14 3 11 #"environment"
0 0 22 3 1 #" "
0 0 14 3 6 #"return"
0 0 22 3 1 #" "
0 0 14 3 5 #"break"
0 0 22 3 1 #" "
0 0 14 3 8 #"continue"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"     (("
0 0 14 3 8 #"evaluate"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 22 3 2 #") "
0 0 14 3 11 #"environment"
0 0 22 3 3 #") ("
0 0 14 3 14 #"interpret_stmt"
0 0 22 3 2 #" ("
0 0 14 3 4 #"then"
0 0 22 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 22 3 3 #") ("
0 0 14 3 12 #"evaluate-env"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 22 3 2 #") "
0 0 14 3 11 #"environment"
0 0 22 3 2 #") "
0 0 14 3 6 #"return"
0 0 22 3 1 #" "
0 0 14 3 5 #"break"
0 0 22 3 1 #" "
0 0 14 3 8 #"continue"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"     (("
0 0 14 3 5 #"pair?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 22 3 5 #"))) ("
0 0 14 3 14 #"interpret_stmt"
0 0 22 3 2 #" ("
0 0 14 3 4 #"else"
0 0 22 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 22 3 3 #") ("
0 0 14 3 12 #"evaluate-env"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 22 3 2 #") "
0 0 14 3 11 #"environment"
0 0 22 3 2 #") "
0 0 14 3 6 #"return"
0 0 22 3 1 #" "
0 0 14 3 5 #"break"
0 0 22 3 1 #" "
0 0 14 3 8 #"continue"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 14 3 4 #"else"
0 0 22 3 1 #" "
0 0 14 3 11 #"environment"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 25 #"; returns the then clause"
0 0 22 29 1 #"\n"
0 0 17 3 47 #"; ((> x y) (return y) (return x)) -> (return y)"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 4 #"then"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 4 #"stmt"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 3 #"car"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 17 3 25 #"; returns the else clause"
0 0 22 29 1 #"\n"
0 0 17 3 47 #"; ((> x y) (return y) (return x)) -> (return x)"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 4 #"else"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 4 #"stmt"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 3 #"car"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 31 #"; returns body for a while stmt"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 7 #"getbody"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 4 #"stmt"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 3 #"car"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 23 #"; executes a while loop"
0 0 22 29 1 #"\n"
0 0 17 3 19 #"; ( (cond) (body) )"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 15 #"interpret_while"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 4 #"stmt"
0 0 22 3 1 #" "
0 0 14 3 11 #"environment"
0 0 22 3 1 #" "
0 0 14 3 6 #"return"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 7 #"call/cc"
0 0 22 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 5 #"break"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               ("
0 0 15 3 6 #"letrec"
0 0 22 3 3 #" (("
0 0 14 3 4 #"loop"
0 0 22 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 5 #"condt"
0 0 22 3 1 #" "
0 0 14 3 4 #"body"
0 0 22 3 1 #" "
0 0 14 3 11 #"environment"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 33 #"                                ("
0 0 15 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 36 #"                                  (("
0 0 14 3 8 #"evaluate"
0 0 22 3 1 #" "
0 0 14 3 5 #"condt"
0 0 22 3 1 #" "
0 0 14 3 11 #"environment"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 36 #"                                   ("
0 0 14 3 4 #"loop"
0 0 22 3 1 #" "
0 0 14 3 5 #"condt"
0 0 22 3 1 #" "
0 0 14 3 4 #"body"
0 0 22 3 2 #" ("
0 0 14 3 14 #"interpret_stmt"
0 0 22 3 1 #" "
0 0 14 3 4 #"body"
0 0 22 3 2 #" ("
0 0 14 3 12 #"evaluate-env"
0 0 22 3 1 #" "
0 0 14 3 5 #"condt"
0 0 22 3 1 #" "
0 0 14 3 11 #"environment"
0 0 22 3 2 #") "
0 0 14 3 6 #"return"
0 0 22 3 1 #" "
0 0 14 3 5 #"break"
0 0 22 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 1 #"e"
0 0 22 3 3 #") ("
0 0 14 3 4 #"loop"
0 0 22 3 1 #" "
0 0 14 3 5 #"condt"
0 0 22 3 1 #" "
0 0 14 3 4 #"body"
0 0 22 3 1 #" "
0 0 14 3 1 #"e"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 3 35 #"                                  ("
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 14 3 12 #"evaluate-env"
0 0 22 3 1 #" "
0 0 14 3 5 #"condt"
0 0 22 3 1 #" "
0 0 14 3 11 #"environment"
0 0 22 3 6 #"))))))"
0 0 22 29 1 #"\n"
0 0 22 3 18 #"                 ("
0 0 14 3 4 #"loop"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 22 3 3 #") ("
0 0 14 3 7 #"getbody"
0 0 22 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 22 3 2 #") "
0 0 14 3 11 #"environment"
0 0 22 3 6 #"))))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 62
#"; sets aside a new environment block for a given program block"
0 0 22 29 1 #"\n"
0 0 17 3 12 #"; { (body) }"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 15 #"interpret_begin"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 4 #"stmt"
0 0 22 3 1 #" "
0 0 14 3 11 #"environment"
0 0 22 3 1 #" "
0 0 14 3 6 #"return"
0 0 22 3 1 #" "
0 0 14 3 5 #"break"
0 0 22 3 1 #" "
0 0 14 3 8 #"continue"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 14 3 12 #"remove_block"
0 0 22 3 2 #" ("
0 0 14 3 19 #"interpret_stmt_list"
0 0 22 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 22 3 2 #" ("
0 0 14 3 9 #"add_block"
0 0 22 3 1 #" "
0 0 14 3 11 #"environment"
0 0 22 3 2 #") "
0 0 14 3 6 #"return"
0 0 22 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 1 #"v"
0 0 22 3 3 #") ("
0 0 14 3 5 #"break"
0 0 22 3 2 #" ("
0 0 14 3 12 #"remove_block"
0 0 22 3 1 #" "
0 0 14 3 1 #"v"
0 0 22 3 4 #"))) "
0 0 14 3 8 #"continue"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 53 #"; essentially does the same thing as interpreter decl"
0 0 22 29 1 #"\n"
0 0 17 3 20 #"; (name params body)"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 22 #"interpret_function_dec"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 4 #"name"
0 0 22 3 1 #" "
0 0 14 3 6 #"params"
0 0 22 3 1 #" "
0 0 14 3 4 #"body"
0 0 22 3 1 #" "
0 0 14 3 11 #"environment"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 4 #"bind"
0 0 22 3 1 #" "
0 0 14 3 4 #"name"
0 0 22 3 2 #" ("
0 0 14 3 14 #"create_closure"
0 0 22 3 1 #" "
0 0 14 3 4 #"name"
0 0 22 3 1 #" "
0 0 14 3 6 #"params"
0 0 22 3 1 #" "
0 0 14 3 4 #"body"
0 0 22 3 1 #" "
0 0 14 3 11 #"environment"
0 0 22 3 3 #") ("
0 0 14 3 3 #"add"
0 0 22 3 1 #" "
0 0 14 3 4 #"name"
0 0 22 3 1 #" "
0 0 14 3 11 #"environment"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 48 #"; (params body (lambda (e) (get-function-env e))"
0 0 22 29 1 #"\n"
0 0 17 3 63
#"; uses continuations so that recursive functions can be called."
0 0 22 29 1 #"\n"
0 0 17 3 63
#"; access the environment from the closure by calling the stored"
0 0 22 29 1 #"\n"
0 0 17 3 66
#"; procedure on the environment so that the function declaration is"
0 0 22 29 1 #"\n"
0 0 17 3 12 #"; inside it."
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 14 #"create_closure"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 4 #"name"
0 0 22 3 1 #" "
0 0 14 3 6 #"params"
0 0 22 3 1 #" "
0 0 14 3 4 #"body"
0 0 22 3 1 #" "
0 0 14 3 11 #"environment"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 14 3 6 #"params"
0 0 22 3 1 #" "
0 0 14 3 4 #"body"
0 0 22 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 1 #"e"
0 0 22 3 3 #") ("
0 0 14 3 10 #"get_funenv"
0 0 22 3 1 #" "
0 0 14 3 4 #"name"
0 0 22 3 1 #" "
0 0 14 3 6 #"params"
0 0 22 3 1 #" "
0 0 14 3 4 #"body"
0 0 22 3 1 #" "
0 0 14 3 1 #"e"
0 0 22 3 3 #")) "
0 0 14 3 11 #"environment"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 44 #"; allows for the use of recursive functions."
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 10 #"get_funenv"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 4 #"name"
0 0 22 3 1 #" "
0 0 14 3 6 #"params"
0 0 22 3 1 #" "
0 0 14 3 4 #"body"
0 0 22 3 1 #" "
0 0 14 3 1 #"e"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 4 #"bind"
0 0 22 3 1 #" "
0 0 14 3 4 #"name"
0 0 22 3 2 #" ("
0 0 14 3 14 #"create_closure"
0 0 22 3 1 #" "
0 0 14 3 4 #"name"
0 0 22 3 1 #" "
0 0 14 3 6 #"params"
0 0 22 3 1 #" "
0 0 14 3 4 #"body"
0 0 22 3 1 #" "
0 0 14 3 1 #"e"
0 0 22 3 3 #") ("
0 0 14 3 3 #"add"
0 0 22 3 1 #" "
0 0 14 3 4 #"name"
0 0 22 3 1 #" "
0 0 14 3 1 #"e"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 45 #"; handles call by value and call by reference"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 23 #"interpret_function_call"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 7 #"closure"
0 0 22 3 1 #" "
0 0 14 3 6 #"params"
0 0 22 3 1 #" "
0 0 14 3 11 #"environment"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 12 #"call_ref_env"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 7 #"closure"
0 0 22 3 2 #") "
0 0 14 3 6 #"params"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 19 #"                  ("
0 0 14 3 19 #"interpret_stmt_list"
0 0 22 3 2 #" ("
0 0 14 3 3 #"op1"
0 0 22 3 1 #" "
0 0 14 3 7 #"closure"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 40 #"                                       ("
0 0 14 3 10 #"add_params"
0 0 22 3 2 #" ("
0 0 14 3 7 #"remove&"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 7 #"closure"
0 0 22 3 3 #")) "
0 0 14 3 6 #"params"
0 0 22 3 2 #" ("
0 0 14 3 9 #"add_block"
0 0 22 3 2 #" ("
0 0 14 3 14 #"getenv_closure"
0 0 22 3 1 #" "
0 0 14 3 7 #"closure"
0 0 22 3 3 #")) "
0 0 14 3 11 #"environment"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 40 #"                                       ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 1 #"v"
0 0 22 3 3 #") ("
0 0 14 3 5 #"error"
0 0 22 3 1 #" "
0 0 19 3 23 #"\"Value cannot be used.\""
0 0 22 3 3 #")) "
0 0 22 29 1 #"\n"
0 0 22 3 40 #"                                       ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 1 #"v"
0 0 22 3 3 #") ("
0 0 14 3 5 #"error"
0 0 22 3 1 #" "
0 0 19 3 15 #"\"Illegal break\""
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 40 #"                                       ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 1 #"v"
0 0 22 3 3 #") ("
0 0 14 3 5 #"error"
0 0 22 3 1 #" "
0 0 19 3 18 #"\"Illegal continue\""
0 0 22 3 4 #"))) "
0 0 22 29 1 #"\n"
0 0 22 3 18 #"                  "
0 0 14 3 11 #"environment"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 53 #"; returns the value that results from a function call"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 24 #"interpret_function_callv"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 7 #"closure"
0 0 22 3 1 #" "
0 0 14 3 6 #"params"
0 0 22 3 1 #" "
0 0 14 3 11 #"environment"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 7 #"call/cc"
0 0 22 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 1 #"k"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               ("
0 0 14 3 19 #"interpret_stmt_list"
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ("
0 0 14 3 3 #"op1"
0 0 22 3 1 #" "
0 0 14 3 7 #"closure"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ("
0 0 14 3 10 #"add_params"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 7 #"closure"
0 0 22 3 2 #") "
0 0 14 3 6 #"params"
0 0 22 3 2 #" ("
0 0 14 3 9 #"add_block"
0 0 22 3 2 #" ("
0 0 14 3 14 #"getenv_closure"
0 0 22 3 1 #" "
0 0 14 3 7 #"closure"
0 0 22 3 3 #")) "
0 0 14 3 11 #"environment"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"                "
0 0 14 3 1 #"k"
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 1 #"v"
0 0 22 3 3 #") ("
0 0 14 3 5 #"error"
0 0 22 3 1 #" "
0 0 19 3 15 #"\"Illegal break\""
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 1 #"v"
0 0 22 3 3 #") ("
0 0 14 3 5 #"error"
0 0 22 3 1 #" "
0 0 19 3 18 #"\"Illegal continue\""
0 0 22 3 7 #")))))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 48 #"; takes params and their values and adds them to"
0 0 22 29 1 #"\n"
0 0 17 3 17 #"; the environment"
0 0 22 29 1 #"\n"
0 0 17 3 7 #"; works"
0 0 22 29 1 #"\n"
0 0 17 3 94
(
 #"; old_e corresponds to the environment stored in the closure, active"
 #" when function was defined"
) 0 0 22 29 1 #"\n"
0 0 17 3 83
(
 #"; curr_e is the environment that was just used and stores the values"
 #" for the params"
) 0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 10 #"add_params"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 4 #"vars"
0 0 22 3 1 #" "
0 0 14 3 6 #"params"
0 0 22 3 1 #" "
0 0 14 3 5 #"old_e"
0 0 22 3 1 #" "
0 0 14 3 6 #"curr_e"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 22 3 1 #" "
0 0 14 3 6 #"params"
0 0 22 3 2 #") "
0 0 14 3 5 #"old_e"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 10 #"add_params"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 4 #"vars"
0 0 22 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 6 #"params"
0 0 22 3 3 #") ("
0 0 14 3 4 #"bind"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"vars"
0 0 22 3 3 #") ("
0 0 14 3 8 #"evaluate"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 6 #"params"
0 0 22 3 2 #") "
0 0 14 3 6 #"curr_e"
0 0 22 3 3 #") ("
0 0 14 3 3 #"add"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"vars"
0 0 22 3 2 #") "
0 0 14 3 5 #"old_e"
0 0 22 3 3 #")) "
0 0 14 3 6 #"curr_e"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 9 #"; (& x y)"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 12 #"call_ref_env"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 14 #"closure_params"
0 0 22 3 1 #" "
0 0 14 3 11 #"call_params"
0 0 22 3 1 #" "
0 0 14 3 8 #"call_env"
0 0 22 3 1 #" "
0 0 14 3 8 #"curr_env"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 11 #"assign_vals"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 5 #"     "
0 0 14 3 11 #"call_params"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 14 3 12 #"get_ref_vars"
0 0 22 3 1 #" "
0 0 14 3 14 #"closure_params"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 14 3 13 #"get_paramvals"
0 0 22 3 2 #" ("
0 0 14 3 7 #"remove&"
0 0 22 3 1 #" "
0 0 14 3 14 #"closure_params"
0 0 22 3 2 #") "
0 0 14 3 8 #"call_env"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 14 3 13 #"switch_global"
0 0 22 3 2 #" ("
0 0 14 3 12 #"remove_block"
0 0 22 3 1 #" "
0 0 14 3 8 #"call_env"
0 0 22 3 2 #") "
0 0 14 3 8 #"curr_env"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 13 #"get_paramvals"
0 0 22 29 1 #"\n"
0 0 22 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 6 #"params"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   ("
0 0 15 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"     (("
0 0 14 3 5 #"null?"
0 0 22 3 1 #" "
0 0 14 3 6 #"params"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 22 3 3 #"())"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 22 3 2 #" ("
0 0 14 3 6 #"lookup"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 6 #"params"
0 0 22 3 2 #") "
0 0 14 3 3 #"env"
0 0 22 3 3 #") ("
0 0 14 3 13 #"get_paramvals"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 6 #"params"
0 0 22 3 2 #") "
0 0 14 3 3 #"env"
0 0 22 3 6 #"))))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 71
(
 #"; for the purposes of call by reference this will assign a list of v"
 #"ars"
) 0 0 22 29 1 #"\n"
0 0 17 3 70
(
 #"; in the current environment values resulting from the functional ca"
 #"ll"
) 0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 11 #"assign_vals"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 6 #"params"
0 0 22 3 1 #" "
0 0 14 3 12 #"check_params"
0 0 22 3 1 #" "
0 0 14 3 4 #"vals"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 22 3 1 #" "
0 0 14 3 6 #"params"
0 0 22 3 2 #") "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 12 #"check_params"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 7 #"valonly"
0 0 22 3 3 #") ("
0 0 14 3 11 #"assign_vals"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 6 #"params"
0 0 22 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 12 #"check_params"
0 0 22 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 4 #"vals"
0 0 22 3 2 #") "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 14 3 11 #"assign_vals"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 6 #"params"
0 0 22 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 12 #"check_params"
0 0 22 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 4 #"vals"
0 0 22 3 3 #") ("
0 0 14 3 4 #"bind"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 6 #"params"
0 0 22 3 3 #") ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"vals"
0 0 22 3 2 #") "
0 0 14 3 3 #"env"
0 0 22 3 6 #"))))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 3 #";  "
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 13 #"switch_global"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 5 #"f_env"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 4 #"list"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 3 #") ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 5 #"f_env"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 22 #"; '(& x & y) -> '(x y)"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 7 #"remove&"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 6 #"params"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 22 3 1 #" "
0 0 14 3 6 #"params"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 22 3 3 #"())"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 6 #"params"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 1 #"&"
0 0 22 3 3 #") ("
0 0 14 3 7 #"remove&"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 6 #"params"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 6 #"params"
0 0 22 3 3 #") ("
0 0 14 3 7 #"remove&"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 6 #"params"
0 0 22 3 7 #")))))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 93
(
 #"; finds the variables in the input that are call by ref by seeing if"
 #" they are preceded with &"
) 0 0 22 29 1 #"\n"
0 0 17 3 70
(
 #"; puts valonly in the spot of variables that do not have a preceding"
 #" &"
) 0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 12 #"get_ref_vars"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 4 #"vars"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 22 3 1 #" "
0 0 14 3 4 #"vars"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 22 3 3 #"())"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"      "
0 0 17 3 67
#"; should technically check to make sure something comes after the &"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"vars"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 1 #"&"
0 0 22 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 22 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 22 3 1 #" "
0 0 14 3 4 #"vars"
0 0 22 3 3 #") ("
0 0 14 3 12 #"get_ref_vars"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 4 #"vars"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 7 #"valonly"
0 0 22 3 2 #" ("
0 0 14 3 12 #"get_ref_vars"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 4 #"vars"
0 0 22 3 7 #")))))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 63
#"; applies the function stored in the op2 of the closure to the "
0 0 22 29 1 #"\n"
0 0 17 3 42 #"; environment stored in the op3 of closure"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 14 #"getenv_closure"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 7 #"closure"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    (("
0 0 14 3 3 #"op2"
0 0 22 3 1 #" "
0 0 14 3 7 #"closure"
0 0 22 3 3 #") ("
0 0 14 3 3 #"op3"
0 0 22 3 1 #" "
0 0 14 3 7 #"closure"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 19 #"interpret_class_def"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 15 3 5 #"class"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 15 #"interpret_class"
0 0 22 3 2 #" ("
0 0 14 3 9 #"get_cname"
0 0 22 3 1 #" "
0 0 15 3 5 #"class"
0 0 22 3 3 #") ("
0 0 14 3 11 #"get_cparent"
0 0 22 3 1 #" "
0 0 15 3 5 #"class"
0 0 22 3 3 #") ("
0 0 14 3 11 #"get_cparams"
0 0 22 3 1 #" "
0 0 15 3 5 #"class"
0 0 22 3 2 #") "
0 0 14 3 3 #"env"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 62
#";takes a class definition and pops out the parent classes name"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 11 #"get_cparent"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 15 3 5 #"class"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 15 3 5 #"class"
0 0 22 3 5 #")))) "
0 0 20 3 1 #"'"
0 0 22 3 3 #"())"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 15 3 5 #"class"
0 0 22 3 9 #")))))))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 72
(
 #";takes a class definition and pops out the class params (includes fu"
 #"ncs)"
) 0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 11 #"get_cparams"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 15 3 5 #"class"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 3 #"car"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 15 3 5 #"class"
0 0 22 3 6 #"))))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 2 #"de"
0 0 15 3 4 #"fine"
0 0 22 3 1 #" "
0 0 14 3 15 #"interpret_class"
0 0 22 29 1 #"\n"
0 0 22 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 4 #"name"
0 0 22 3 1 #" "
0 0 14 3 6 #"parent"
0 0 22 3 1 #" "
0 0 14 3 6 #"params"
0 0 22 3 1 #" "
0 0 14 3 9 #"environme"
0 0 14 3 1 #"n"
0 0 14 3 1 #"t"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   ("
0 0 14 3 4 #"bind"
0 0 22 3 1 #" "
0 0 14 3 4 #"name"
0 0 22 3 2 #" ("
0 0 14 3 16 #"create_class_env"
0 0 22 3 1 #" "
0 0 14 3 6 #"params"
0 0 22 3 2 #" ("
0 0 14 3 8 #"get_penv"
0 0 22 3 1 #" "
0 0 14 3 6 #"parent"
0 0 22 3 1 #" "
0 0 14 3 11 #"environment"
0 0 22 3 4 #")) ("
0 0 14 3 3 #"add"
0 0 22 3 1 #" "
0 0 14 3 4 #"name"
0 0 22 3 1 #" "
0 0 14 3 11 #"environment"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 67
#"; if a class has a parent this will return that parents environment"
0 0 22 29 1 #"\n"
0 0 17 3 54 #"; otherwise it will simply return an empty environment"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 8 #"get_penv"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 6 #"parent"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 22 3 1 #" "
0 0 14 3 6 #"parent"
0 0 22 3 2 #") "
0 0 14 3 15 #"new_environment"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 14 3 9 #"add_block"
0 0 22 3 2 #" ("
0 0 14 3 6 #"lookup"
0 0 22 3 1 #" "
0 0 14 3 6 #"parent"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 6 #"))))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 55 #"; takes the contents of a class and generates a closure"
0 0 22 29 1 #"\n"
0 0 17 3 28 #"; for that class essentially"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 16 #"create_class_env"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 6 #"params"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 22 3 1 #" "
0 0 14 3 6 #"params"
0 0 22 3 2 #") "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 6 #"params"
0 0 22 3 3 #")) "
0 0 20 3 1 #"'"
0 0 14 3 10 #"static-var"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 16 #"create_class_env"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 6 #"params"
0 0 22 3 3 #") ("
0 0 14 3 13 #"interpret_dec"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 6 #"params"
0 0 22 3 3 #")) "
0 0 14 3 3 #"env"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 6 #"params"
0 0 22 3 3 #")) "
0 0 20 3 1 #"'"
0 0 14 3 15 #"static-function"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 16 #"create_class_env"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 6 #"params"
0 0 22 3 3 #") ("
0 0 14 3 22 #"interpret_function_dec"
0 0 22 3 2 #" ("
0 0 14 3 3 #"op1"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 6 #"params"
0 0 22 3 4 #")) ("
0 0 14 3 3 #"op2"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 6 #"params"
0 0 22 3 4 #")) ("
0 0 14 3 3 #"op3"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 6 #"params"
0 0 22 3 3 #")) "
0 0 14 3 3 #"env"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 14 3 16 #"create_class_env"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 6 #"params"
0 0 22 3 2 #") "
0 0 14 3 3 #"env"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 17 3 57 #";takes an expression, evaluates it, and returns the value"
0 0 22 29 1 #"\n"
0 0 17 3 26 #"; no type checking is done"
0 0 22 29 1 #"\n"
0 0 17 3 14 #"; (+ 5 3) -> 8"
0 0 22 29 1 #"\n"
0 0 17 3 23 #"; (|| false true) -> #t"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 8 #"evaluate"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 4 #"expr"
0 0 22 3 1 #" "
0 0 14 3 11 #"environment"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 9 #"undefined"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"      "
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 7 #"number?"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 2 #") "
0 0 14 3 4 #"expr"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"      "
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"true"
0 0 22 3 2 #") "
0 0 20 3 2 #"#t"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"      "
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"false"
0 0 22 3 2 #") "
0 0 20 3 2 #"#f"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"     "
0 0 22 29 1 #"\n"
0 0 22 3 6 #"      "
0 0 17 3 58
#";variable or function. if function then evaluate its value"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 3 #"not"
0 0 22 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 4 #")) ("
0 0 14 3 3 #"not"
0 0 22 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 5 #"))) ("
0 0 14 3 6 #"lookup"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 1 #" "
0 0 14 3 11 #"environment"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"      "
0 0 22 29 1 #"\n"
0 0 22 3 6 #"      "
0 0 17 3 36 #"; we need to perform a function call"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"      "
0 0 17 3 27 #"; (funcall name p1 p2...pn)"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 7 #"funcall"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 24 #"interpret_function_callv"
0 0 22 3 2 #" ("
0 0 14 3 6 #"lookup"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 3 #")) "
0 0 14 3 11 #"environment"
0 0 22 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 3 #")) "
0 0 14 3 11 #"environment"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"      "
0 0 22 29 1 #"\n"
0 0 22 3 6 #"      "
0 0 17 3 79
(
 #";ask if need to add error to lambda (v) v here to detect illegal bre"
 #"ak/continue"
) 0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"="
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 8 #"evaluate"
0 0 22 3 2 #" ("
0 0 14 3 3 #"op1"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 3 #") ("
0 0 14 3 14 #"interpret_stmt"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 2 #" ("
0 0 14 3 12 #"evaluate-env"
0 0 22 3 2 #" ("
0 0 14 3 3 #"op1"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 2 #") "
0 0 14 3 11 #"environment"
0 0 22 3 3 #") ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 1 #"v"
0 0 22 3 2 #") "
0 0 14 3 1 #"v"
0 0 22 3 3 #") ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 1 #"v"
0 0 22 3 2 #") "
0 0 14 3 1 #"v"
0 0 22 3 3 #") ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 1 #"v"
0 0 22 3 2 #") "
0 0 14 3 1 #"v"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"      "
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"%"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 6 #"modulo"
0 0 22 3 2 #" ("
0 0 14 3 8 #"evaluate"
0 0 22 3 2 #" ("
0 0 14 3 3 #"op1"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 2 #") "
0 0 14 3 11 #"environment"
0 0 22 3 3 #") ("
0 0 14 3 8 #"evaluate"
0 0 22 3 2 #" ("
0 0 14 3 3 #"op2"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 3 #") ("
0 0 14 3 12 #"evaluate-env"
0 0 22 3 2 #" ("
0 0 14 3 3 #"op1"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 2 #") "
0 0 14 3 11 #"environment"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"      "
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"*"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 1 #"*"
0 0 22 3 2 #" ("
0 0 14 3 8 #"evaluate"
0 0 22 3 2 #" ("
0 0 14 3 3 #"op1"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 2 #") "
0 0 14 3 11 #"environment"
0 0 22 3 3 #") ("
0 0 14 3 8 #"evaluate"
0 0 22 3 2 #" ("
0 0 14 3 3 #"op2"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 4 #")  ("
0 0 14 3 12 #"evaluate-env"
0 0 22 3 2 #" ("
0 0 14 3 3 #"op1"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 2 #") "
0 0 14 3 11 #"environment"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"      "
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"/"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 1 #"/"
0 0 22 3 2 #" ("
0 0 14 3 8 #"evaluate"
0 0 22 3 2 #" ("
0 0 14 3 3 #"op1"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 2 #") "
0 0 14 3 11 #"environment"
0 0 22 3 3 #") ("
0 0 14 3 8 #"evaluate"
0 0 22 3 2 #" ("
0 0 14 3 3 #"op2"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 3 #") ("
0 0 14 3 12 #"evaluate-env"
0 0 22 3 2 #" ("
0 0 14 3 3 #"op1"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 2 #") "
0 0 14 3 11 #"environment"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"      "
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"+"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 1 #"+"
0 0 22 3 2 #" ("
0 0 14 3 8 #"evaluate"
0 0 22 3 2 #" ("
0 0 14 3 3 #"op1"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 2 #") "
0 0 14 3 11 #"environment"
0 0 22 3 3 #") ("
0 0 14 3 8 #"evaluate"
0 0 22 3 2 #" ("
0 0 14 3 3 #"op2"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 4 #")  ("
0 0 14 3 12 #"evaluate-env"
0 0 22 3 2 #" ("
0 0 14 3 3 #"op1"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 2 #") "
0 0 14 3 11 #"environment"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"      "
0 0 22 29 1 #"\n"
0 0 22 3 6 #"      "
0 0 17 3 6 #";unary"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"-"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 4 #")) ("
0 0 14 3 5 #"null?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 6 #")))) ("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 2 #" ("
0 0 14 3 8 #"evaluate"
0 0 22 3 2 #" ("
0 0 14 3 3 #"op1"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 2 #") "
0 0 14 3 11 #"environment"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"      "
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"-"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 1 #"-"
0 0 22 3 2 #" ("
0 0 14 3 8 #"evaluate"
0 0 22 3 2 #" ("
0 0 14 3 3 #"op1"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 2 #") "
0 0 14 3 11 #"environment"
0 0 22 3 3 #") ("
0 0 14 3 8 #"evaluate"
0 0 22 3 2 #" ("
0 0 14 3 3 #"op2"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 3 #") ("
0 0 14 3 12 #"evaluate-env"
0 0 22 3 2 #" ("
0 0 14 3 3 #"op1"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 2 #") "
0 0 14 3 11 #"environment"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"      "
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 2 #"=="
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 4 #")) ("
0 0 14 3 1 #"="
0 0 22 3 2 #" ("
0 0 14 3 8 #"evaluate"
0 0 22 3 2 #" ("
0 0 14 3 3 #"op1"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 2 #") "
0 0 14 3 11 #"environment"
0 0 22 3 3 #") ("
0 0 14 3 8 #"evaluate"
0 0 22 3 2 #" ("
0 0 14 3 3 #"op2"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 3 #") ("
0 0 14 3 12 #"evaluate-env"
0 0 22 3 2 #" ("
0 0 14 3 3 #"op1"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 2 #") "
0 0 14 3 11 #"environment"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 2 #"!="
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 4 #")) ("
0 0 14 3 3 #"not"
0 0 22 3 2 #" ("
0 0 14 3 1 #"="
0 0 22 3 2 #" ("
0 0 14 3 8 #"evaluate"
0 0 22 3 2 #" ("
0 0 14 3 3 #"op1"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 2 #") "
0 0 14 3 11 #"environment"
0 0 22 3 3 #") ("
0 0 14 3 8 #"evaluate"
0 0 22 3 2 #" ("
0 0 14 3 3 #"op2"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 3 #") ("
0 0 14 3 12 #"evaluate-env"
0 0 22 3 2 #" ("
0 0 14 3 3 #"op1"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 2 #") "
0 0 14 3 11 #"environment"
0 0 22 3 10 #")))))     "
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #">"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 4 #")) ("
0 0 14 3 1 #">"
0 0 22 3 2 #" ("
0 0 14 3 8 #"evaluate"
0 0 22 3 2 #" ("
0 0 14 3 3 #"op1"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 2 #") "
0 0 14 3 11 #"environment"
0 0 22 3 3 #") ("
0 0 14 3 8 #"evaluate"
0 0 22 3 2 #" ("
0 0 14 3 3 #"op2"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 3 #") ("
0 0 14 3 12 #"evaluate-env"
0 0 22 3 2 #" ("
0 0 14 3 3 #"op1"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 2 #") "
0 0 14 3 11 #"environment"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"<"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 4 #")) ("
0 0 14 3 1 #"<"
0 0 22 3 2 #" ("
0 0 14 3 8 #"evaluate"
0 0 22 3 2 #" ("
0 0 14 3 3 #"op1"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 2 #") "
0 0 14 3 11 #"environment"
0 0 22 3 3 #") ("
0 0 14 3 8 #"evaluate"
0 0 22 3 2 #" ("
0 0 14 3 3 #"op2"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 3 #") ("
0 0 14 3 12 #"evaluate-env"
0 0 22 3 2 #" ("
0 0 14 3 3 #"op1"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 2 #") "
0 0 14 3 11 #"environment"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 2 #">="
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 4 #")) ("
0 0 14 3 2 #">="
0 0 22 3 2 #" ("
0 0 14 3 8 #"evaluate"
0 0 22 3 2 #" ("
0 0 14 3 3 #"op1"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 2 #") "
0 0 14 3 11 #"environment"
0 0 22 3 3 #") ("
0 0 14 3 8 #"evaluate"
0 0 22 3 2 #" ("
0 0 14 3 3 #"op2"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 3 #") ("
0 0 14 3 12 #"evaluate-env"
0 0 22 3 2 #" ("
0 0 14 3 3 #"op1"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 2 #") "
0 0 14 3 11 #"environment"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 2 #"<="
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 4 #")) ("
0 0 14 3 2 #"<="
0 0 22 3 2 #" ("
0 0 14 3 8 #"evaluate"
0 0 22 3 2 #" ("
0 0 14 3 3 #"op1"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 2 #") "
0 0 14 3 11 #"environment"
0 0 22 3 3 #") ("
0 0 14 3 8 #"evaluate"
0 0 22 3 2 #" ("
0 0 14 3 3 #"op2"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 3 #") ("
0 0 14 3 12 #"evaluate-env"
0 0 22 3 2 #" ("
0 0 14 3 3 #"op1"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 2 #") "
0 0 14 3 11 #"environment"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"      "
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 2 #"&&"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 8 #"evaluate"
0 0 22 3 2 #" ("
0 0 14 3 3 #"op1"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 2 #") "
0 0 14 3 11 #"environment"
0 0 22 3 3 #") ("
0 0 14 3 8 #"evaluate"
0 0 22 3 2 #" ("
0 0 14 3 3 #"op2"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 3 #") ("
0 0 14 3 12 #"evaluate-env"
0 0 22 3 2 #" ("
0 0 14 3 3 #"op1"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 2 #") "
0 0 14 3 11 #"environment"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 2 #"||"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 2 #"or"
0 0 22 3 2 #" ("
0 0 14 3 8 #"evaluate"
0 0 22 3 2 #" ("
0 0 14 3 3 #"op1"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 2 #") "
0 0 14 3 11 #"environment"
0 0 22 3 3 #") ("
0 0 14 3 8 #"evaluate"
0 0 22 3 2 #" ("
0 0 14 3 3 #"op2"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 3 #") ("
0 0 14 3 12 #"evaluate-env"
0 0 22 3 2 #" ("
0 0 14 3 3 #"op1"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 2 #") "
0 0 14 3 11 #"environment"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"      "
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"!"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 3 #"not"
0 0 22 3 2 #" ("
0 0 14 3 8 #"evaluate"
0 0 22 3 2 #" ("
0 0 14 3 3 #"op1"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 2 #") "
0 0 14 3 11 #"environment"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"      "
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 14 3 8 #"evaluate"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 2 #") "
0 0 14 3 11 #"environment"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"      )))"
0 0 22 29 1 #"\n"
0 0 22 3 2 #"  "
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 12 #"evaluate-env"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 4 #"expr"
0 0 22 3 1 #" "
0 0 14 3 11 #"environment"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 9 #"undefined"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"      "
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 7 #"number?"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 2 #") "
0 0 14 3 11 #"environment"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"      "
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"true"
0 0 22 3 2 #") "
0 0 14 3 11 #"environment"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"      "
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"false"
0 0 22 3 2 #") "
0 0 14 3 11 #"environment"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"      "
0 0 22 29 1 #"\n"
0 0 22 3 6 #"      "
0 0 17 3 10 #"; variable"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 3 #"not"
0 0 22 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 4 #")) ("
0 0 14 3 3 #"not"
0 0 22 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 4 #"))) "
0 0 14 3 11 #"environment"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"      "
0 0 22 29 1 #"\n"
0 0 22 3 6 #"      "
0 0 17 3 10 #"; function"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 7 #"funcall"
0 0 22 3 2 #") "
0 0 14 3 11 #"environment"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"      "
0 0 17 3 35 #"; ((number? (car expr)) (car expr))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"="
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 12 #"evaluate-env"
0 0 22 3 2 #" ("
0 0 14 3 3 #"op1"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 3 #") ("
0 0 14 3 14 #"interpret_stmt"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 1 #" "
0 0 14 3 11 #"environment"
0 0 22 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 1 #"v"
0 0 22 3 2 #") "
0 0 14 3 1 #"v"
0 0 22 3 3 #") ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 1 #"v"
0 0 22 3 2 #") "
0 0 14 3 1 #"v"
0 0 22 3 3 #") ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 1 #"v"
0 0 22 3 2 #") "
0 0 14 3 1 #"v"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"      "
0 0 22 29 1 #"\n"
0 0 22 3 6 #"      "
0 0 17 3 6 #";unary"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"-"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 4 #")) ("
0 0 14 3 5 #"null?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 6 #")))) ("
0 0 14 3 12 #"evaluate-env"
0 0 22 3 2 #" ("
0 0 14 3 3 #"op1"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 2 #") "
0 0 14 3 11 #"environment"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"      "
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 2 #"or"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"*"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 4 #")) ("
0 0 14 3 2 #"or"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"/"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 4 #")) ("
0 0 14 3 2 #"or"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"+"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 4 #")) ("
0 0 14 3 2 #"or"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"-"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 4 #")) ("
0 0 14 3 2 #"or"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 2 #"&&"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 4 #")) ("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 2 #"||"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 7 #")))))))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 12 #"evaluate-env"
0 0 22 3 2 #" ("
0 0 14 3 3 #"op2"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 3 #") ("
0 0 14 3 12 #"evaluate-env"
0 0 22 3 2 #" ("
0 0 14 3 3 #"op1"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 2 #") "
0 0 14 3 11 #"environment"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 2 #"or"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #">"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 4 #")) ("
0 0 14 3 2 #"or"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"<"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 4 #")) ("
0 0 14 3 2 #"or"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 2 #">="
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 4 #")) ("
0 0 14 3 2 #"or"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 2 #"<="
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 4 #")) ("
0 0 14 3 2 #"or"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 2 #"=="
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 4 #")) ("
0 0 14 3 2 #"or"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"%"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 4 #")) ("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 2 #"!="
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 8 #"))))))))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 12 #"evaluate-env"
0 0 22 3 2 #" ("
0 0 14 3 3 #"op2"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 3 #") ("
0 0 14 3 12 #"evaluate-env"
0 0 22 3 2 #" ("
0 0 14 3 3 #"op1"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 2 #") "
0 0 14 3 11 #"environment"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"      "
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"!"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 12 #"evaluate-env"
0 0 22 3 2 #" ("
0 0 14 3 3 #"op1"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 2 #") "
0 0 14 3 11 #"environment"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 14 3 12 #"evaluate-env"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 2 #") "
0 0 14 3 11 #"environment"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"      )))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 76
(
 #"; takes a list of expressions and evaluates them returning a list of"
 #" values."
) 0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 11 #"eval_params"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 6 #"params"
0 0 22 3 1 #" "
0 0 14 3 11 #"environment"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 13 #"eval_params_h"
0 0 22 3 1 #" "
0 0 14 3 6 #"params"
0 0 22 3 1 #" "
0 0 14 3 11 #"environment"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 5 #"())))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 42 #";returns the first operand of a given stmt"
0 0 22 29 1 #"\n"
0 0 17 3 14 #"; (+ x y) -> x"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 3 #"op1"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 4 #"expr"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 3 #"car"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 43 #";returns the second operand of a given stmt"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 3 #"op2"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 4 #"expr"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 3 #"car"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 17 3 43 #"; returns the third operand of a given stmt"
0 0 22 29 1 #"\n"
0 0 17 3 36 #"; (funcall name params body) -> body"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 3 #"op3"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 4 #"expr"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 3 #"car"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 16 #"))))))          "
0 0 22 29 1 #"\n"
0 0 22 3 21 #"                     "
0 0 22 29 1 #"\n"
0 0 22 3 21 #"                     "
0 0 22 29 1 #"\n"
0 0 22 3 21 #"                     "
0 0 22 29 1 #"\n"
0 0 22 3 21 #"                     "
0 0 22 29 1 #"\n"
0           0
